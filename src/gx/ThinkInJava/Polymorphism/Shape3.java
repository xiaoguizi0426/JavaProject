package gx.ThinkInJava.Polymorphism;
/*
 * Polymorphism.03
 * 在Shape.java中添加一个方法，用于打印一条消息，但导出类不要覆盖这个方法。解释发生了什么。
 * 在其中一个导出类中覆盖该方法，其它导出类不予覆盖，观察又发生什么。最后，在所有导出类中覆盖
 * 这个方法。
 */
import java.util.Random;

//class Shape{
//	public void draw(){}
//	public void erase(){}
//	public void amend(){System.out.println("Shape.amend()");}
//}
//
//class Circle extends Shape{
//	@Override
//	public void draw(){
//		System.out.println("Circle.draw()");
//	}
//	
//	@Override
//	public void erase(){
//		System.out.println("Circle.erase()");
//	}
//	
//	@Override
//	public void amend(){
//		System.out.println("Circle.amend()");
//	}
//}
//
//class Square extends Shape{
//	@Override
//	public void draw(){
//		System.out.println("Square.draw()");
//	}
//	
//	@Override
//	public void erase(){
//		System.out.println("Square.erase()");
//	}
//	
//	@Override
//	public void amend(){
//		System.out.println("Square.amend()");
//	}
//}
//
//class Triangle extends Shape{
//	@Override
//	public void draw(){
//		System.out.println("Triangle.draw()");
//	}
//	
//	@Override
//	public void erase(){
//		System.out.println("Triangle.erase()");
//	}
//	
//	@Override
//	public void amend(){
//		System.out.println("Triangle.amend()");
//	}
//}
//
//class RandomShapeGenerator{
//	private Random rand = new Random();
//	public Shape next(){
//		switch(rand.nextInt(3)){
//			default:
//			case 0:return new Circle();
//			case 1:return new Square();
//			case 2:return new Triangle();
//		}
//	}
//}

public class Shape3 {
	private static RandomShapeGenerator gen = new RandomShapeGenerator();
	public static void main(String[] args) {
		Shape[] s = new Shape[10];
		for(int i=0;i<s.length;i++){
			s[i] = gen.next();
		}
		for(Shape p : s){
			p.draw();
			p.amend();
		}
	}

}
